GENERAL
1. Node is a javascript runtime based on google's open source v8 engine.
2. Introduced in 2009 by Ryan Duhl, by embeding v8 engine into a c++ program.
#3. Nodejs is single threaded, event driven and non-blocking. (light weight).
4. Good for scalable large data intensive applications (good for streaming sites, real time chat applications).
5. Always use even numbered LTS(long term support) version for devlopment and deployment.

---------------------------------------------------------------------------------------------------------------------------------------

REPL
1. stands for Read-Eval-Print-Loop.
2. "_" is a special variable that stores the value of the previous expression.

---------------------------------------------------------------------------------------------------------------------------------------

WORKING WITH TERMINAL
1. Nodejs allows us to do read and write operation form the terminal by providing "readline" module. (based on First Project).

---------------------------------------------------------------------------------------------------------------------------------------

READING AND WRITING FILES (can be done synchronously and asynchronously by the help of "fs" module)
Synhronously - using "readFileSync" and "writeFileSync" etc.
Asynchronously - using "readFile" and "writeFile" etc.

----------------------------------------------------------------------------------------------------------------------------------------

ASYNCHRONOUS NATURE OF NODEJS
1. Nodejs is single threaded which means it has single main thread of execution. In synchronous APIs, it will wait for the execution of the time taking operation and hence block the main thread until that operation is done. After that only will it allow the execution of other statements.
2. In asynchronous APIs, the main execution thread doesn't get blocked and it is processed in the background while the main execution thread executes the remaining statements. Those asynchronous APIs need a callback function that is executed once that operation is done(callback function doesn't always mean asynchronous and we must also avoid callback hell). (this how the implementation of Non-Blocking IO Model is done)

----------------------------------------------------------------------------------------------------------------------------------------

SIMPLE SERVER PURELY IN NODEJS (No Express)
1. Using http module, we can create a simple server instance using createServer() method of http and then call listen() method to start the server.

----------------------------------------------------------------------------------------------------------------------------------------

ROUTING AND ITS USE IN NODEJS
1. Routing defines the way in which the client requests are handled by the application endpoints. It means implementing different actions for different URLs.
2. Different URL patterns:
(a)File based URL - where we specify the file name which we want to access and see in the browser.(localhost:3000/home.html)
(b)Resource based URL - where we map a url pattern to a request handler. (localhost:3000/Home)
3. Routes can also take route parameters (localhost:3000/Product/101) and query strings (localhost:3000/Books?author=john&id=101)

----------------------------------------------------------------------------------------------------------------------------------------

MODULES IN NODEJS
1. Every script file in nodejs is a module.
2. Module is just a script file where we can export some values and then those value can be imported and used in other script files.
3. Different types of Modules:
(a)Built-in modules - These modules are available for use when you install Node.js (e.g. http, fs, os)
(b)Local modules - you create local modules that you load and use in your program.
(c)Third-party modules - external modules that we access using npm.

----------------------------------------------------------------------------------------------------------------------------------------

EVENT DRIVEN ARCHITECTURE IN NODEJS (also called observer pattern in JS)
1.Event Emitter - emits named events when something important happens in the app (e.g. a request hitting the server etc.)
2.Event Listener - emitted event is picked up by listener and then call a callback function assigned to be called after the event is picked
3.Event Handler - that assigned callback function is called event handler