GENERAL
1. Node is a javascript runtime based on google's open source v8 engine.
2. Introduced in 2009 by Ryan Duhl, by embeding v8 engine into a c++ program.
#3. Nodejs is single threaded, event driven and non-blocking. (light weight).
4. Good for scalable large data intensive applications (good for streaming sites, real time chat applications).
5. Always use even numbered LTS(long term support) version for devlopment and deployment.

---------------------------------------------------------------------------------------------------------------------------------------

REPL
1. stands for Read-Eval-Print-Loop.
2. "_" is a special variable that stores the value of the previous expression.

---------------------------------------------------------------------------------------------------------------------------------------

WORKING WITH TERMINAL
1. Nodejs allows us to do read and write operation form the terminal by providing "readline" module. (based on First Project).

---------------------------------------------------------------------------------------------------------------------------------------

READING AND WRITING FILES (can be done synchronously and asynchronously by the help of "fs" module)
Synhronously - using "readFileSync" and "writeFileSync" etc.
Asynchronously - using "readFile" and "writeFile" etc.

----------------------------------------------------------------------------------------------------------------------------------------

ASYNCHRONOUS NATURE OF NODEJS
1. Nodejs is single threaded which means it has single main thread of execution. In synchronous APIs, it will wait for the execution of the time taking operation and hence block the main thread until that operation is done. After that only will it allow the execution of other statements.
2. In asynchronous APIs, the main execution thread doesn't get blocked and it is processed in the background while the main execution thread executes the remaining statements. Those asynchronous APIs need a callback function that is executed once that operation is done(callback function doesn't always mean asynchronous and we must also avoid callback hell). (this how the implementation of Non-Blocking IO Model is done)

----------------------------------------------------------------------------------------------------------------------------------------

SIMPLE SERVER PURELY IN NODEJS (No Express)
1. Using http module, we can create a simple server instance using createServer() method of http and then call listen() method to start the server.

----------------------------------------------------------------------------------------------------------------------------------------

ROUTING AND ITS USE IN NODEJS
1. Routing defines the way in which the client requests are handled by the application endpoints. It means implementing different actions for different URLs.
2. Different URL patterns:
(a)File based URL - where we specify the file name which we want to access and see in the browser.(localhost:3000/home.html)
(b)Resource based URL - where we map a url pattern to a request handler. (localhost:3000/Home)
3. Routes can also take route parameters (localhost:3000/Product/101) and query strings (localhost:3000/Books?author=john&id=101)

----------------------------------------------------------------------------------------------------------------------------------------

MODULES IN NODEJS
1. Every script file in nodejs is a module.
2. Module is just a script file where we can export some values and then those value can be imported and used in other script files.
3. Different types of Modules:
(a)Built-in modules - These modules are available for use when you install Node.js (e.g. http, fs, os)
(b)Local modules - you create local modules that you load and use in your program.
(c)Third-party modules - external modules that we access using npm.

----------------------------------------------------------------------------------------------------------------------------------------

EVENT DRIVEN ARCHITECTURE IN NODEJS (also called observer pattern in JS)
1.Event Emitter - emits named events when something important happens in the app (e.g. a request hitting the server etc.)
2.Event Listener - emitted event is picked up by listener and then call a callback function assigned to be called after the event is picked
3.Event Handler - that assigned callback function is called event handler

----------------------------------------------------------------------------------------------------------------------------------------

STREAMS IN NODEJS
1.Streams are objects that let you read data from a source or write data to a destination in continuous fashion. (great for handling large volume of data)
2.Streams are intances of event emitter class i.e. they can listen to named events.
3.Types of streams in Nodejs:
(a)Readable Stream - The readable streams are the one from where we can read or consume data chunk by chunk. (e.g. Request stream, read file stream etc.). Important readable stream events - data & read. Important readable stream methods - read and pipe.
(b)Writable Stream - The writable streams are the one to which we can write data chunk by chunk. Opposite of readable stream. (e.g. response stream, write file stream etc.). Important writable stream events - drain & finish. Important writable stream methods - write and end.
(c)Duplex Stream - Duplex stream is simply a stream that is both readable and writable at the same time. (e.g. web sockets).
(d)Transform Stream - Transform streams are duplex streams which can also modify or transform data as it is read or written. (e.g. zlib - used for compression).

----------------------------------------------------------------------------------------------------------------------------------------

NPM (Node Package Manager) is a package manager for the Node JavaScript platform. It consists of an npm registry that enables Open-Source developers to publish and share their code.
1.Package repository for the JS based packages.
2.also a CLI for managing the packages.
3.npm init creates a package.json file for us with infromation about the project and its dependencies.
3.Types of packages based on dependencies:
(a)Production Dependencies - Production dependencies are fundamental dependencies that are required to complete the project. Package.json specifies these dependencies under the key “dependencies”. These are the packages used in the project code.
(b)Development Dependencies - The packages required by a developer during development are called devDependencies. Dependencies that you might need at some point in the development process, but not during execution. They are not included in the production version and will not be downloaded to end user’s browser caches. For example, Nodemon, lodash, Babel etc.
(c)Peer Dependencies - The only time you would encounter peer dependencies is if you were publishing your own package ie, when you develop a code that will be used by other programs. Libraries use peerDependencies to tell developers which other libraries with the exact version they will need to install in their own websites to use your library. Therefore, peer dependencies also express compatibility. The peerDependencies ensure that the code is compatible with the version of the package installed. peerDependencies are not automatically installed. You need to manually modify your package.json file in order to add a Peer Dependency.
(d)Optional Dependencies - As the name implies, optional dependencies are those that won’t cause a failure during the installation of the dependencies for an application or project because npm will ignore them if they fail. Regardless of whether these dependencies are present or not, the application will still run just fine. Adding a dependency as optional can speed up the installation process for Node projects.
(e)Bundled Dependencies - When publishing the package, these dependencies are bundled with it. NPM packages are preserved locally or can be downloaded from a single file. For example, express, request packages can be bundled. BundledDependencies are listed as an array, without versions. Bundled Dependencies have the same functionality as normal dependencies. When normal dependencies are insufficient, bundled dependencies can be useful. They are rarely used. 

----------------------------------------------------------------------------------------------------------------------------------------

ARCHITECTURE OF NODEJS
1.Based on the combination of V8 engine and LIBUV library.
2.V8(JS & C++) - responsible for executing the JS code (JS code into machine code) that we write in the backend application.
3.LIBUV(C & C++) - open source library that deals with asynchronous I/O.(allows access to file systems, network systems, os etc.) Responsible for two of the most important features of Nodejs i.e. Event Loop and Thread Pool.
4.Event Loop - responsible for executing simpler tasks like callbacks and network io.
5.Pool Thread - responsible for heavy tasks like file access, compression etc.
6.Process - just a program which is currently executing.
7.Thread - responsible for executing program code in a process. Each process has a main thread.
8.Asynchronous tasks are pushed to the thread pool so the main thread doesn't get blocked. when that asynchronous task is completed the callback functions attached to that asynchronous task is moved to the event loop and which is then executed by main thread.

----------------------------------------------------------------------------------------------------------------------------------------
